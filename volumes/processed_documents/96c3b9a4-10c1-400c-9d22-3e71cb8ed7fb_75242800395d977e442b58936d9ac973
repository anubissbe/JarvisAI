{"file": "/app/backend/data/uploads/e7b10bb2-67b0-46af-9f96-d96bbad2741a_howto-functional.pdf", "title": "e7b10bb2-67b0-46af-9f96-d96bbad2741a_howto-functional.pdf", "kb_id": "96c3b9a4-10c1-400c-9d22-3e71cb8ed7fb", "processed_date": "2025-05-18T16:33:59.006336", "topics": ["Python", "Java", "Ruby", "Go", "Library", "SQL", "REST", "Function", "Class", "Object", "Method", "Variable", "Loop", "Exception", "Error", "Test", "Person", "ContactInfo", "TemporalInfo", "EducationInfo", "ProfessionalInfo", "RelationshipInfo", "LocationInfo", "InterestInfo", "LegalInfo", "Person: Name", "ContactInfo: Phone", "ContactInfo: Website", "TemporalInfo: Date", "EducationInfo: Grade", "ProfessionalInfo: Company", "RelationshipInfo: Acquaintance", "LocationInfo: Travel", "InterestInfo: Collection", "LegalInfo: Legal_Doc"], "entities": ["and returns its contents", "that captures the essence of the comment", "in several different ways", "are lists of instructions that tell the computer what", "manipulate collections of objects", "that use", "or libraries", "written in functional style usually won", "consist of making the right set of state changes", "correct is to write down invariants", "correct is largely impractical and not relevant to Python software", "require proofs that are several pages long", "you use daily", "are more modular as", "For example", "by arranging existing", "if the iterator is infinite", "written in", "an operation on all the iter", "the same cal", "to organize the data flow inside", "docs@python.org", "2025", "342", "10000", "10000", "769", "7953", "9828", "6431", "8442", "9878", "6213", "2207", "769", "2207", "6213", "6431", "7953", "8442", "9828", "9878", "9878", "9828", "8442", "7953", "6431", "6213", "2207", "769", "120", "30 2006", "1 2006", "10 2006", "289", "342", "289", "342", "https://www.haskell.org/", "https://mitpress.mit.edu/sicp", "https://www.defmacro.org/ramblings/fp.html", "https://en.wikipedia.org/wiki/Functional_programming", "https://en.wikipedia.org/wiki/Coroutine", "https://en.wikipedia.org/wiki/Partial_application", "https://en.wikipedia.org/wiki/Currying", "https://gnosis.cx/TPiP/", "9\nOct 10", "11\nDec 12", "A", "B", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "A", "B", "A", "A", "B", "A", "A", "B", "A", "B", "A", "B", "B", "A", "A", "A", "A", "Support Iterators", "Support Iterators\nWe", "Julie\nSussman", "method calls that let you modify this state, and programs", "method called __next__() that takes no arguments and always returns the next element of", "know an iterator will return N elements, you can unpack them", "mething different with the same stream, you\u2019ll have to create a new iterator", "methods that return other iterators", "method resumes the generator\u2019s code and", "method will be the only method used to resume your generator", "methods on generators:", "metimes want to construct variants of existing functions that have", "meters and an expression combining these parameters, and creates an", "trip off trailing", "trip all the whitespace from a stream of strings with the following code:", "tripped_iter =(line ", "trip() for line inline_list)", "tripped_list =[line ", "trip() for line inline_list]", "tripped_list =[line ", "trip() for line inline_list", "tripped_list is a list containing the resulting lines, not an", "tripped_lines =[line ", "trip() for line inlines]", "collections of objects", "collection of method calls that let you modify this state, and programs", "collector when the generator is garbage-collected", "collects all the elements of the iterable into a list, sorts the", "collects all the consecutive elements from the underlying iterable that have the same key value, and", "remember when they\u2019re needed", "lease 3", "lease", "will use non-functional features internally", "will still use assignments to local variables, but won\u2019t modify global variables or", "will be unavoidably specialized to a particular application, but others will be useful in a wide variety", "will return the object\u2019s", "will return N elements, you can unpack them", "will return the largest or smallest", "will never", "will", "will loop over the dictionary\u2019s keys:", "will be the successive values of expression ", "will be immediately passed to a function you can write:", "will", "will resume executing", "will often be returning None, you should always check for this case", "will be the only method used to resume your generator", "will trigger a RuntimeError ", "will also be called by", "will be the same length as the shortest iterable", "will introduce the module\u2019s contents by showing small examples", "will repeat these elements infinitely", "will return the first stopelements", "will be skipped accordingly", "will all return the con-", "will return a stream of tuples, and calls funcusing", "will signal the end of its results", "will already be sorted based on the key"]}