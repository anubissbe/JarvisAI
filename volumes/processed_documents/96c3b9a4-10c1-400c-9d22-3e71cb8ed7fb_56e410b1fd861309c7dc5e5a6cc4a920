{"file": "/app/backend/data/uploads/ee8043f1-be55-40d7-b4e4-3466129eca28_faq.pdf", "title": "ee8043f1-be55-40d7-b4e4-3466129eca28_faq.pdf", "kb_id": "96c3b9a4-10c1-400c-9d22-3e71cb8ed7fb", "processed_date": "2025-05-18T16:34:59.581196", "topics": ["Python", "Java", "C++", "Go", "API", "Library", "REST", "Function", "Class", "Object", "Method", "Variable", "Loop", "Exception", "Error", "Debug", "Test", "Deployment", "Person", "ContactInfo", "TemporalInfo", "EducationInfo", "ProfessionalInfo", "RelationshipInfo", "LocationInfo", "ProjectInfo", "InterestInfo", "NoteInfo", "LegalInfo", "Person: Name", "ContactInfo: Email", "ContactInfo: Phone", "ContactInfo: Website", "TemporalInfo: Time", "EducationInfo: Grade", "ProfessionalInfo: Company", "RelationshipInfo: Family", "RelationshipInfo: Acquaintance", "LocationInfo: Home", "LocationInfo: Travel", "ProjectInfo: Task", "InterestInfo: Collection", "NoteInfo: Reminder", "LegalInfo: Contract", "LegalInfo: Legal_Doc"], "entities": ["that was", "has gone out of scope", "even though it is bound to two names and invoked through the name Bthe created", "of that cat you found on your porch", "def myFunc", "must always specify the class whether inside", "suitable for", "import some", "class MyVisitor", "for the function", "of the module is leo", "for the flavor of classes now used for all class objects", "is the same as the", "of Stichting Mathematisch Centrum or CWI not be used in advertising or", "of the project nor the names of its contributors", "of Sam", "of neither Automatrix", "of Lance Ellinghouse", "by David", "of the author nor the names of its", "of the", "really telling", "The language comes with", "Consultthe GettingStartedsectionofthePythonDeveloper", "are included in", "By using the standard library", "PythonWin is available as part of", "with circular imports", "becausewhen foo", "in the same", "do not use isinstance", "if your Python code depends on the", "norresourceforks onmacOSHFS", "YouneedtorealizethatyourPythonscriptshavetobeprocessedbyanotherprogramcalledthePython interpreter", "with Python", "Depending on what platform", "to network servers and administrative", "There are actually three categories of file objects", "and conditions of this License Agreement", "ANY REPRESENTATION OR", "and conditions", "and conditions of this License Agreement", "and conditions of this BeOpen Python License Agreement", "ANY REPRESENTATION OR", "and conditions", "and conditions of this License Agreement", "and conditions of this License Agreement", "and conditions in CNRI", "ANY REPRESENTATION OR WARRANTY", "and conditions", "ALL WARRANTIES WITH REGARD TO THIS", "ALL WARRANTIES WITH", "ALL WARRANTIES WITH REGARD TO THIS SOFTWARE", "ALL WARRANTIES WITH REGARD TO THIS", "of the", "ALL WARRANTIES WITH REGARD TO", "and conditions", "ALL WARRANTIES WITH REGARD", "AND CONDITIONS FOR USE", "and conditions for use", "that are managed by", "and conditions of", "and conditions of", "and conditions", "and conditions of", "or conditions", "of any separate license agreement you may have executed", "asserted against", "AND CONDITIONS", "docs@python.org", "34A04430.CF9@ohioee.com", "receiver@example.com", "timo@alum.mit.edu", "zooko@zooko.com", "marek@popcount.org", "jloup@gzip.org", "madler@alumni.caltech.edu", "jeff@FreeBSD.org", "2025", "232", "1-1-0", "100", "101", "101", "102", "102", "103", "103", "106", "107", "107", "108", "108", "109", "110", "110", "110", "113", "115", "1989", "1991", "387", "1991", "1991", "283", "303", "1970", "1991", "602", "314", "314", "100", "100", "100", "100", "1000", "1000", "165", "178", "200", "190", "190", "144", "144", "144", "144", "0144", "144", "144", "144", "324", "144", "144", "144", "0144", "333", "52560", "314", "1000", "13901272", "2000", "13901272", "1000", "2000", "13901272", "13891296", "1000", "500", "500", "2012", "2012", "3147", "100", "7352", "4198", "199999999999", "99996", "001100110011", "001100110011", "001100110011", "001100110011", "0011", "199999999999", "999955591079", "014993738383", "054733276367", "1875", "200", "572", "3000", "2006", "004643", "539294296", "1142331976", "98767", "555", "9999999", "1001", "7777777", "333", "1970", "2016", "040070", "755", "001", "130283832797", "456", "130283824404", "752", "130283816012", "048", "130283807619", "344", "130283799226", "640", "130283832797", "456", "703", "232", "04430", "19 2017", "1900 32", "1-1-0", "484", "526", "362", "492", "492", "525", "492", "492", "492", "343", "343", "492", "492", "498", "128", "238", "703", "484", "8192", "285", "443", "483", "484", "585", "703", "683", "256", "255", "256", "302", "1252", "1024", "1024", "420", "362", "519", "420", "411", "3000", "3155", "387", "+0000", "484", "484", "278", "3116", "484", "526", "1990", "1995", "2000", "2001", "1991-1995", "2 1995-1999", "2 2000", "6 2000", "6 2001", "1 2001", "1 2001", "1 2001", "1 2002", "2 2002", "1 2001", "2001-2024", "160", "95051", "1895", "20191", "1995-2001", "1895", "1013", "1895", "1013", "1991", "1995", "2002", "19937", "19937", "2002", "1997", "2002", "1995", "1996", "1997", "1998", "1996", "2000", "2001", "2000", "1999", "1995-1997", "1991-1995", "1994", "1995", "1000", "100", "1999-2002", "1999-2002", "2001-2006", "101", "2000", "2006", "2007", "2013", "131002", "102", "202205170334", "2009", "1991", "2000", "2001", "2004", "103", "104", "105", "1998", "1999", "2000", "106", "1996-2008", "1995-2011", "107", "2005", "2008-2020", "108", "2013", "109", "2018-2021", "2015-2021", "2019", "2020", "110", "111", "112", "2001-2024", "2000", "1995-2000", "1991-1995", "113", "114", "115", "3000", "238", "278", "302", "343", "362", "373", "387", "411", "420", "443", "483", "484", "492", "498", "519", "525", "526", "572", "585", "602", "683", "703", "3116", "3147", "3155", "116", "117", "160 Saratoga Avenue", "https://www.python.org/psf/", "https://www.python.org/downloads/", "https://github.com/python/cpython/", "https://docs.python.org/3/", "https://docs.python.org/3/download.html", "https://www.python.org/community/lists/", "https://www.python.org/downloads/", "https://www.python", "https://github.com/python/cpython/issues", "https://wiki.python.org/moin/", "https://www.python.org/about/success", "https://peps.python.org/", "https://code.activestate.com/recipes/52560/", "https://mail.python.org/pipermail/python-3000/2006-November/004643.html", "https://mail.python.org/pipermail/python-ideas/2016-May/040070.html", "https://groups.google.com/groups", "https://wiki.python.org/moin/", "https://www.boost.org/libs/python/doc/index.html", "https://www.python.org/psf/", "https://opensource.org", "http://www.pythonlabs.com/logos.html", "http://hdl.handle.net/1895.22/1013", "http://www.math", "http://www.math.sci.hiroshima-u.ac.jp/", "https://www.wide.ad.jp/", "http://zooko.com/", "https://github.com/majek/csiphash/", "https://131002.net/siphash/siphash24.c", "https://web.archive.org/web/", "http://www.netlib.org/fp/dtoa.c", "https://www.apache.org/licenses/", "https://www.w3.org/TR/xml-c14n2-testcases/", "http://magic.io", "02/1/26", "10:15", "06:04:45", "MAIL =\"/usr/sbin/sendmail \"# sendmail location", "class has a name: even though it is bound to two names and invoked through the name Bthe createdncorporated Software", "National Research\nInitiatives", "National Research Initiatives", "$0", "herecopyrightrestrictionsontheuseofPython? ", "hereanybooksonPython? ", "hereanequivalenttoC\u2019sonexit()inPython? ", "herecopyrightrestrictionsontheuseofPython?", "hereanybooksonPython?", "hiscase,ifthesecondmoduleisonlyusedinonefunction,thentheimportcaneasilybemovedintothatfunction", "hismeansthatthereisonlyoneobject(thelist),and", "hereisoneclassofoperationswherethesameoperationsometimeshasdifferentbehaviorswithdifferent", "here\u2019snoaliasbetweenanargumentnameinthecallerandcallee,andsonocall-by-referenceperse", "here\u2019salmostneveragoodreasontogetthiscomplicated", "heraspaceorparentheses", "hisFAQfocuseson CPython", "herreasonablyefficientidiomistouse io", "hereasonisthatreplicatingalistwith *doesn\u2019tcreatecopies,itonlycreatesreferencestotheexistingobjects", "hereareseveralpossiblereasonsforthis", "hereeachchildhasaparentreferenceandeachparenthas", "theirparentand", "theirparentclass:", "hisisalsooneofthereasonsforthedistinctionbetweentuplesand", "hereisnologicalreasontomakethemunavailableonliterals", "herminorreasonisthatthecolonmakesiteasierforeditorswithsyntaxhighlighting;theycanlookforcolons", "hereareseveralreasonstoallowthis", "hereanequivalenttoC\u2019sonexit()inPython?", "hisisoneofPython\u2019sstrongestfeatures", "here are two problems with Python\u2019s C API which will become apparent if you use a compiler other than", "herakeyboardhitispresent,and getch()whichgetsonecharacterwithoutechoingit", "hisimplementationfromotherssuchasJythonorIronPython", "hisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata", "heresourcesitreliesonmaynotfunction", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining a copy", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining a copy", "hereby granted, free of charge, to any person obtaining", "methodsorattributesofanobject? ", "methoddefinedinabaseclassfromaderivedclassthatextendsit? ", "meticoperations? ", "knowledgementsforIncorporatedSoftware ", "methatascriptinglanguagewithasyntaxlikeABCbutwithaccesstotheAmoebasystem", "known problems are included in a bugfix release, and it\u2019s guaranteed that interfaces will remain the same", "know that there is a very good Python mode for Emacs", "meteris Noneandcreateanewlist/dictionary/whatever", "meters aredefinedbythenamesthatappearinafunctiondefinition,whereas arguments arethevaluesactually", "metersdefinewhat kind of arguments afunctioncanaccept", "methodthatmutatesanobjectwillreturn Nonetohelpavoidgettingthetwotypesof", "know if two variables refer to the same object or not, you can use the isoperator, or the built-in", "methodsorattributesofanobject?", "methodsandattributesdefinedbyitsclass", "knownbymanynames,ornonameatall!", "meterlistmeansthatbothparametersarepositional-only", "method of string objects and then convert decimal strings to numeric values using int()orfloat()", "methodsforcreatingarraysoffixedtypeswithcompactrepresentations,butthey", "methodorfunctionandaccumulatethereturnvaluesisalist,a list comprehension isanelegantsolution:", "know that (a) if an object implements an __iadd__() magic method, it", "methods)specifictoadatatype", "methodisafunctiononsomeobject xthatyounormallycallas x", "methodsontheclassesthatencapsulateaparticular", "methodyou\u2019reinterestedinchanginganddelegatesallothermethodstothecorrespondingmethodof x", "methodsaredelegatedtotheunderlying self", "method defined in a base class from a derived class that", "methodisviaasimplemodule-levelfunction:", "metimeafterthelastreferencetoyourdatastructurevanishes,so", "method may be called at an inconvenient and random time", "method can then remove attributes that refer to subobjects", "methodthatbehaveslike dict", "methodsthatdonottakeanyarguments", "methods that have hashablearguments", "methodssothatthecachecandetectrelevantattributeupdates:", "methatstartswiththesamenameasthe ", "metimesstareatitalongtimewonderingastowhy yisbeingdecrementedeven", "knowingthatastringisimmutablemeanswecanallocatespaceforitatcreationtime,andthe", "methodorinstanceattributeinsteadofalocalvariable", "meth() makes it absolutely clear that an instance variable or method is used even if you don\u2019t know the", "methingusingarawOOnotation", "knowthat it is asking for the length of something", "knowthatxissomekindofcontainerimplementinganinterface", "method,orsomethingthatisn\u2019tafilehas", "method,sinceinthatcaseitiseasytoseethat", "methodbecauseinusingityouaretellingtheseparatorstringtoiterateoverasequenceofstrings", "methods on objects, you can simplify yet further by using the getattr() built-in to retrieve methods", "method =getattr (self , method_name)", "metypeandwhichareoperatedonone-by-one", "knowinadvancewhichattributewillbereferencedatruntime", "methinglike mathmodule", "methodthataddsitemstothequeueanda ", "metadata, thoughusing shutil", "methodwillworkonanyhostthatsupportsanSMTP", "methodtoavoidcreatinganexception", "methodtocall,aformatstringlikethatusedwith Py_BuildValue() ,andtheargument", "metimesyouwanttoemulatethePythoninteractiveinterpreter\u2019sbehavior,whereitgivesyouacontinuationprompt", "methoduntilitraisesa StopAsyncIteration exception", "methodscalledbythe withstatement", "method() andstaticmethod() ", "method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be", "meta path finders forusewith sys", "meta_path ,andpath entry finders foruse", "methodorwitha __getitem__() methodthatimplements sequence", "methodjustraise StopIteration again", "methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces", "metapathfinder", "meta_path ", "methodsthatmetapathfindersimplement", "metaclass is responsible for taking those three arguments and creating the class", "methods that may not be found", "methods,andstaticmethods", "method)definitionthatspecifiesan argument(orinsomecases,arguments)", "knows how to locate", "methodsthatpathentryfindersimplement", "meta path finders whichsearchesan import path formodules", "methoddefinedinthat", "method and defines a __len__() method that returns the length of the sequence", "methodsgenerally,seeCommonSequenceOperations", "methodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition", "knownas\u201cencoding\u201d,andrecreatingthestringfromthesequence", "knowledgements for Incorporated Software foranincompletelistoftheselicenses", "knowledgementsforIncorporatedSoftware", "knowledgementsforthird-partysoftwareincorporated", "knowledgementsforIncorporatedSoftware 97", "knowledgementsforIncorporatedSoftware 99", "knowledgementsforIncorporatedSoftware 101", "knowledgementsforIncorporatedSoftware 103", "knowledgementsforIncorporatedSoftware 105", "knowledgment in the product documentation would be", "knowledgementsforIncorporatedSoftware 107", "knowledgementsforIncorporatedSoftware 109", "knowledgementsforIncorporatedSoftware 111", "meta path finder ,82", "homepageisat https://www", "homepageat https://www", "live,createanotherreferencetotheobject:", "liveintwodifferentnamespaces,andyouneedtotellPythonwhichnamespace", "homedirectorysoyou\u2019reseeingsomethingsimilar", "trip(\"\\r\\n\") to remove all occurrences of any line terminator from the end of the string S", "triplestringquotes),butitgivesyouasyntaxerrormessageimmediatelywhentheinputisinvalid", "triplequotes),orafterspecifyingadecorator", "triple-quotedstring", "triple-quoted string ,88", "likethisapproachmuchbecausetheimportsappearinastrangeplace,butitdoeswork", "assignment: sincelocalvariablesinPythonare(by", "todoacomplicatedsort: canyoudoaSchwartzianTransforminPython? ", "todotwothings: thescriptfile\u2019smodemustbeexecutableandthefirstlinemustbeginwith #!followed", "collectionscheme? ", "collectionofcallablescansharetheirsignatureviainheritance:", "collections module", "collections ", "collectormightrunsometimeafterthelastreferencetoyourdatastructurevanishes,so", "collect() toforceacollection,butthere arepathologicalcaseswhereobjectswillneverbecollected", "collector,it\u2019sstillagoodideatodefineanexplicit close()methodonobjectstobecalledwhen-", "collections", "collectreferencecycles,", "collection,obtaindebuggingstatistics,andtunethecollector\u2019s", "collector", "collected (and closed) at varying and possibly long", "collectionsofrelateddatawhichmaybe", "collections", "collection of function and class behaviours, you should write test", "collectionofusefullinksonthe WebProgrammingwikipage ", "collections", "collection", "collection of keyvalue bindings associated with a particular contextvars", "collection", "collectionviareference", "collectorthatisabletodetectandbreakreferencecycles", "collector", "collector", "collections", "collections", "collections", "collections", "collections", "collections", "collectingcommunity", "collections", "collectivelyreferredtoas\u201ctextencodings\u201d", "collection ,79", "rememberthemethodsforalist,theycandosomethinglikethis:", "remindyouthat(unlikethesuperficiallyanalogoussituationwithclass", "rememberbeforedivingfurther:", "remind you of that fact, it does not return the sorted list", "remembertoaddacommatothepreviousline", "rememberinstallingit,thereareseveralpossiblewaysitcould", "rememberingtheexecutionstate(includinglocalvariablesand", "rememberingtheexecutionstate(includinglocalvariablesand", "remember help(x))", "agreementbetweengroupingperceivedbytheparserand", "terms and conditions for use, reproduction,", "lease 3", "leasecontributevia thePSF", "lease3", "lease", "leasesarebugfixreleases", "lease,aseriesofdevelopmentreleasesaremade,", "lease candidate", "leases in which interfaces aren\u2019t yet finalized; it\u2019s", "leases", "leasecandidatesarefrozen,makingnochangesexceptasneeded", "leasecandidateversionshaveanadditionalsuffix:", "leasecandidateversionis\u201crcN\u201dforsomesmallnumber N", "leasedversions,builtdirectlyfrom", "leaseismade, theversionisincrementedto", "lease3", "willcompileandrunoutoftheboxonmostUNIXplatforms", "leasesandeventscanbefoundincomp", "leases are available from https://www", "leases are announced on the", "lease3", "leases have been coming out roughly every 6 to 18 months since 1991, and this seems", "willhaveanewfeaturereleaseevery12months( PEP 602)", "leasesofolderversions,sothestabilityofexistingreleasesgraduallyimproves", "leases, indicated by a third component of the version number (e", "lease, and it\u2019s guaranteed that interfaces will remain the same", "leases", "leasescanalwaysbefoundonthe Pythondownloadpage ", "willrevealcontributionsfrommanydifferentcompaniesandorganizations", "leaseSchedule\u201d,whereX", "leasedyet", "lease3", "lease3", "will be happy to know that there is a very good Python mode for Emacs", "willhelpyoucatchbugssooner", "lease3", "lease3", "willseethattheyallreturn 16:", "lease3", "willbe 0inthefirstlambda, 1inthe", "willnowreturnthecorrectresult:", "lease3", "will have finished initializing, and the second module can do its", "willrefertothischangedobject", "lease3", "lease3", "willreturn Nonetohelpavoidgettingthetwotypesof", "willgiveyouasortedcopyof y,you\u2019llinstead", "willlikelycauseyourprogramtogenerateaneasilydiagnosederror", "willseethechange", "will always see the", "lease3", "lease3", "lease3", "lease3", "lease3", "lease3", "willbesignificantly", "lease3", "willberemoved:", "lease3", "willescapethestring\u2019squote:", "will \\not\\work \\'", "will \\not\\work \\'", "will \\\\work \\\\'", "will\\\\work\\\\'", "will \\work ''\\\\'", "will\\\\work\\\\'", "will \\work ','')", "will\\\\work\\\\'", "will \u201cescape\u201d a quote for the purposes of determining where the raw string ends, no", "willallowyoutoiteratequicklywhensearchingforimprovements(seethe timeit", "lease3", "willbeslower", "lease3", "lease3", "will show in all rows,", "willsuffice:", "lease3", "lease3", "lease3", "willthinkitiscalledas meth(x, a, b, c) ", "will return", "lease3", "lease3", "willautomaticallydeterminetheinstancefromwhichitwascalled(the selfvalue),look", "lease3", "lease3", "willnevergobacktozero", "willneverbecollected", "lease3", "willseeseveralcommonpatternsforcorrectlyusingidentitytests:", "lease3", "lease3", "willbekeptonlyaslongastheinstanceisalive", "willbereleasedrightaway", "will the accumulated method results", "lease3", "willhaveafilenamethatstartswiththesamenameasthe ", "willbecreated", "willbecreatedfor xyzbecause xyzisimported,butno ", "willbecreated", "willwritethe ", "lease3", "willperformthefollowingsteps:", "lease3", "willcontinuetoworkwiththeoldversionoftheimportedobjects", "will notbe updated to use the new class definition", "lease3", "willencounterafragmentofcodelikethis:", "willsometimesstareatitalongtimewonderingastowhy yisbeingdecrementedeven", "lease3", "leaseseethefloating-pointarithmeticchapterinthePythontutorial", "will", "willchangethestring\u201ceight\u201dtoanything", "lease3", "lease3", "lease3", "willprobablyrunoutoffiledescrip-", "deed,usingCPython\u2019sreferencecountinganddestructorscheme,eachnewassignmentto fclosesthepreviousfile", "will only get collected (and closed) at varying and possibly long", "willworkwithanyPythonimplementation,youshouldexplicitlyclosethefileoruse", "willworkregardlessofmemorymanagementscheme:", "lease3", "willcomplainaboutthese)", "willforcethosedeletions", "lease3", "will be stored", "lease3", "willmisbehave", "willactuallydothiscorrectly,", "lease3", "willbereferencedatruntime", "lease3", "will it be", "lease3", "lease3", "willbeabletoskipthisstep", "willusuallyfindsomethinghelpful", "lease3", "lease3", "lease3", "willtakecareofthelocking", "will be no more work and exits", "will run until terminated", "willproducethefollowingoutput:", "lease3", "lease3", "willbeimplementedasanoptionalcompilerflagwhenbuildingtheinterpreter, andsoseparate", "willbeavailablewithandwithouttheGIL", "leasecontaining", "lease", "leasesdoesn\u2019tmeanthatyoucan\u2019tmakegooduseofPythononmulti-", "willalsohelp;ifyouuseaCextensiontoperformatime-consumingtask,theextension", "lease the GIL while the thread of execution is in the C code and allow other threads to get some work done", "will", "will create any", "willremoveintermediatedirectoriesas", "willpreservemost(thoughnotall)of", "lease3", "will be open in text mode and f", "will return strobjects", "will", "lease3", "willworkonanyhostthatsupportsanSMTP", "willhelpyouout", "will either connect immediately (unlikely) or get an exception that contains the error number as", "willreturndifferentvalues,soyou\u2019regoingtohavetocheckwhat\u2019sreturnedonyoursystem", "willjustreturntheerrnovalue", "lease3", "lease3", "willalsocoverthistopic", "lease3", "willgowherever", "lease3", "will also work for", "lease3", "willseemobvious;otherwise,youmightneedalittlemoreguidance", "willendup typingWindowscommandsinto", "willseea", "lease3", "willdisappearafteryoucallthe exit()", "will work fine on other Windows", "deedconfiguredidentically", "will search for foo", "willattempttocall PyInit_foo() toinitializeit", "lease3", "willmaketheapp\u2019sdataandmethods", "willhandlejustaboutallthegrungydetailsforyou", "willcreateaninitfunction(aCfunction)whosenamedependsonthenameoftheextensionmodule", "will be called initleo()", "willbecalledinitleoc()", "will become apparent if you use a compiler other than", "willnotworkinamulti-", "will be different", "willfailinamult-compilerenvironment", "will be independent of your app\u2019s windowing system", "lease3", "willnotbe", "willstillneedtheTclandTklibraries", "will", "lease3", "willnolongerwork", "will no longer run, and some of them might be important to you", "lease3", "lease3", "willexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression", "will not be accessibleusing a dotted expression,", "lease3", "leases", "lease3", "lease3", "lease3", "lease3", "willbecomestandardinafuturereleaseofPython", "will(ordid)becomethedefault:", "lease3", "leasetheGILwhen", "leasedwhen", "lease3", "leasesallallocated", "willjustreturnthesameexhaustediteratorobjectused", "leasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof", "lease3", "lease3", "willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self)", "lease", "lease3", "lease3", "will not be made gratuitously \u2013 they will occur only if", "willstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems", "leaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe", "lease3", "lease3", "willnotbeenhancedfurther", "willnotemitwarnings", "leased", "lease3", "lease3", "lease3", "lease take a look at the reporting-bugs page for information on how to do so", "lease3", "leasedseveralversionsofthesoftware", "leasesareOpenSource(see https://opensource", "leaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases", "lease Derivedfrom Year Owner GPL-compatible? (1)", "leased under the", "leasespossible", "lease3", "will automatically terminate upon a material breach of", "lease3", "will automatically terminate upon a material breach of", "lease3", "will automatically terminate upon a material breach of", "lease3", "lease3", "lease3", "lease3", "lease3", "will comply with the following terms and conditions:", "lease3", "lease3", "lease,andlaterreleasesderived", "lease3", "lease3", "lease3", "will,", "lease3", "will the authors be held liable for any damages", "lease3", "leased under the BSD license:", "lease3", "lease3", "lease3", "lease3", "lease3", "lease3", "lease3"]}