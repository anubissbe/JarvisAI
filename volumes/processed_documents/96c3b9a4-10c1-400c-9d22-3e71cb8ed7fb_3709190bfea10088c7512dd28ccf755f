{"file": "/app/backend/data/uploads/630c784a-ce64-4347-a714-e1c4d8845162_reference.pdf", "title": "630c784a-ce64-4347-a714-e1c4d8845162_reference.pdf", "kb_id": "96c3b9a4-10c1-400c-9d22-3e71cb8ed7fb", "processed_date": "2025-05-18T16:33:10.584692", "topics": ["Python", "Java", "C++", "API", "Framework", "Library", "Database", "REST", "Function", "Class", "Object", "Method", "Variable", "Loop", "Conditional", "Exception", "Error", "Debug", "Test", "Person", "ContactInfo", "EducationInfo", "ProfessionalInfo", "RelationshipInfo", "LocationInfo", "ProjectInfo", "InterestInfo", "NoteInfo", "LegalInfo", "Person: Name", "ContactInfo: Email", "ContactInfo: Phone", "ContactInfo: Website", "EducationInfo: Course", "EducationInfo: Grade", "ProfessionalInfo: Company", "RelationshipInfo: Family", "RelationshipInfo: Acquaintance", "LocationInfo: Home", "LocationInfo: Travel", "ProjectInfo: Goal", "InterestInfo: Collection", "NoteInfo: Reminder", "LegalInfo: Contract", "LegalInfo: Legal_Doc"], "entities": ["of the method", "of the module", "of the module", "of an attribute and", "raises AttributeError", "class AustralianPhilosopher", "isboundlocallytotheresultof type", "is used in", "is not found at all", "refers to", "is used", "resolution with an exception that unbound local variables are looked up in the global namespace", "is not reflected in the qualified name of objects", "resolution of free variables occurs at runtime", "in the local scope", "will be used in various phases of the import search", "is looked up in sys", "of the module being imported", "binding rules this might seem surprising", "of the module being imported", "is bound to an object", "is not bound", "consists only of underscores", "is rebound if it was already bound", "to reach zero", "is annotated in", "is local for that scope", "from the local namespace if it occurs as", "to execute", "to be able to refer to it after the exceptclause", "bindings are", "ThedottednameinthepatternislookedupusingstandardPython name resolution rules", "when ac", "at runtime", "for the flavor of classes now used for all class objects", "is the same as the", "of Stichting Mathematisch Centrum or CWI not be used in advertising or", "of the project nor the names of its contributors", "of Sam", "of neither Automatrix", "of Lance Ellinghouse", "by David", "of the author nor the names of its", "of the", "It is also recommended", "only the module search and", "meta path finder andpath entry finder", "of the expression list", "are characters", "of the assigned sequence", "the binary operation specific to the type of assignment on the two operands", "the addition", "that are", "are surrounded by parentheses", "NAMEwillalwayssucceedanditwillset NAME", "in the subject sequence", "of each", "There are actually three categories of file objects", "and conditions for accessing or otherwise using Python", "and conditions of this License Agreement", "ANY REPRESENTATION OR", "and conditions", "and conditions of this License Agreement", "and conditions of this BeOpen Python License Agreement", "ANY REPRESENTATION OR", "and conditions", "and conditions of this License Agreement", "and conditions of this License Agreement", "and conditions for accessing or otherwise using Python", "and conditions in CNRI", "ANY REPRESENTATION OR WARRANTY", "and conditions", "ALL WARRANTIES WITH REGARD TO THIS", "ALL WARRANTIES WITH", "ALL WARRANTIES WITH REGARD TO THIS SOFTWARE", "ALL WARRANTIES WITH REGARD TO THIS", "of the", "ALL WARRANTIES WITH REGARD TO", "and conditions", "ALL WARRANTIES WITH REGARD", "AND CONDITIONS FOR USE", "and conditions for use", "that are managed by", "and conditions of", "and conditions of", "and conditions", "and conditions of", "or conditions", "of any separate license agreement you may have executed", "asserted against", "AND CONDITIONS", "docs@python.org", "timo@alum.mit.edu", "zooko@zooko.com", "marek@popcount.org", "jloup@gzip.org", "madler@alumni.caltech.edu", "2025", "100", "100", "101", "101", "101", "102", "102", "104", "104", "104", "105", "106", "107", "107", "109", "110", "110", "110", "111", "111", "112", "113", "113", "113", "115", "116", "116", "117", "117", "123", "125", "126", "126", "127", "127", "128", "129", "130", "131", "133", "133", "133", "133", "134", "135", "153", "169", "169", "171", "171", "172", "172", "173", "173", "174", "175", "175", "175", "176", "177", "177", "177", "178", "179", "179", "180", "180", "181", "181", "184", "185", "185", "186", "186", "187", "188", "188", "189", "191", "3120", "1900", "2100", "3131", "+0001", "007", "3131", "128", "414", "377", "377", "34567", "2017", "2017", "2017", "1024", "400", "498", "7 21474836", "47 0", "177 0", "100110111", "3 79228162", "514264337593", "543950336", "377 0", "100", "000", "000", "000 0", "1110", "0101", "077", "010", "14 10", "001 1", "100 3", "10 0", "001", "100", "+0000", "256", "366", "3147", "2000", "1000", "626", "2011-003", "562", "252", "560", "3115", "3000", "3135", "3119", "484", "560", "343", "634", "688", "492", "649", "695", "302", "420", "420", "420", "420", "302", "420", "420", "420", "366", "328", "366", "338", "451", "255", "530", "448", "572", "123", "123", "255", "342", "380", "525", "492", "380", "646", "448", "100", "754", "100", "100", "100", "100", "100", "100", "100", "754", "+0041", "+0043", "+0327", "0043", "0327", "9000", "572", "308", "448", "646", "3132", "526", "484", "100", "101", "102", "103", "104", "105", "563", "236", "106", "3104", "107", "695", "108", "109", "110", "111", "112", "113", "114", "343", "634", "636", "115", "100", "200", "100", "300", "200", "300", "100", "200", "100", "200", "200", "116", "117", "572", "118", "119", "120", "121", "122", "634", "636", "123", "614", "570", "646", "124", "3107", "484", "526", "563", "318", "3129", "125", "614", "3115", "3000", "3129", "318", "126", "127", "492", "128", "129", "130", "131", "132", "133", "134", "617", "617", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", "484", "526", "153", "362", "492", "492", "525", "492", "492", "492", "154", "343", "155", "492", "492", "156", "498", "128", "157", "238", "484", "8192", "158", "285", "443", "483", "484", "585", "683", "159", "160", "256", "255", "256", "302", "1252", "161", "1024", "1024", "162", "420", "163", "362", "519", "420", "164", "411", "3000", "3155", "165", "387", "+0000", "166", "484", "484", "278", "3116", "167", "484", "526", "168", "169", "170", "1990", "1995", "2000", "2001", "1991-1995", "2 1995-1999", "2 2000", "6 2000", "6 2001", "1 2001", "1 2001", "1 2001", "1 2002", "2 2002", "1 2001", "171", "2001-2023", "172", "160", "95051", "1895", "20191", "1995-2001", "173", "1895", "1013", "1895", "1013", "1991", "1995", "174", "2002", "19937", "19937", "2002", "1997", "2002", "175", "1995", "1996", "1997", "1998", "176", "1996", "2000", "2001", "177", "2000", "1999", "1995-1997", "1991-1995", "1994", "1995", "1000", "178", "1999-2002", "1999-2002", "2001-2006", "179", "2000", "2006", "2007", "2013", "131002", "180", "202205170334", "2009", "1991", "2000", "2001", "2004", "181", "182", "183", "1998", "1999", "2000", "184", "1996-2008", "1995-2011", "185", "2005", "2008-2020", "186", "2013", "187", "771", "2550", "94043", "2015-2021", "188", "2001-2023", "2000", "1995-2000", "1991-1995", "189", "190", "153", "117", "125", "123", "124", "105", "124", "100", "125", "106", "107", "104", "123", "113", "124", "153", "100", "110", "111", "113", "115", "123", "191", "125", "124", "109", "124", "124", "153", "125", "123", "105", "102", "102", "192", "101", "158", "105", "133", "193", "166", "102", "153", "100", "153", "124", "153", "124", "111", "104", "104", "111", "113", "115", "115", "113", "117", "100", "101", "100", "100", "126", "126", "126", "127", "154", "154", "154", "154", "154", "154", "101", "194", "126", "154", "154", "154", "106", "104", "123", "125", "155", "104", "110", "113", "106", "106", "134", "106", "1921", "110", "133", "155", "155", "155", "155", "115", "115", "117", "156", "102", "155", "101", "125", "125", "125", "125", "195", "155", "109", "133", "106", "155", "109", "155", "156", "156", "104", "110", "113", "156", "156", "156", "109", "100", "156", "109", "123", "124", "101", "125", "101", "123", "101", "101", "196", "101", "101", "156", "156", "156", "157", "125", "157", "157", "157", "110", "109", "104", "110", "111", "113", "106", "134", "111", "112", "102", "101", "102", "104", "102", "102", "106", "125", "157", "124", "157", "157", "157", "157", "157", "101", "104", "111", "113", "197", "158", "158", "104", "110", "156", "125", "104", "104", "158", "124", "101", "123", "102", "123", "123", "158", "105", "158", "158", "102", "102", "158", "159", "158", "159", "159", "159", "106", "101", "106", "159", "116", "159", "159", "159", "115", "110", "159", "160", "104", "198", "160", "160", "104", "160", "110", "125", "134", "160", "133", "160", "133", "160", "117", "160", "160", "161", "104", "111", "113", "115", "126", "126", "115", "110", "104", "110", "111", "113", "111", "112", "101", "104", "111", "113", "104", "115", "110", "161", "161", "124", "161", "1921", "161", "161", "101", "110", "161", "161", "161", "104", "110", "104", "162", "199", "162", "162", "115", "115", "162", "162", "162", "162", "166", "162", "162", "133", "133", "104", "111", "133", "162", "162", "162", "104", "123", "125", "106", "125", "123", "101", "162", "163", "163", "163", "163", "109", "107", "101", "163", "125", "123", "200", "110", "102", "111", "123", "101", "163", "163", "123", "124", "101", "164", "164", "164", "164", "164", "115", "164", "164", "164", "201", "133", "164", "165", "3000", "165", "164", "236", "106", "238", "158", "252", "255", "278", "167", "302", "161", "308", "318", "125", "126", "328", "338", "342", "343", "115", "155", "362", "154", "164", "366", "380", "411", "165", "414", "420", "163", "164", "443", "159", "448", "451", "483", "159", "484", "100", "125", "153", "158", "159", "167", "168", "492", "128", "154", "156", "498", "157", "519", "164", "525", "154", "526", "100", "125", "153", "168", "530", "560", "562", "563", "106", "125", "570", "124", "572", "118", "585", "159", "614", "124", "126", "617", "135", "626", "634", "115", "123", "636", "115", "123", "646", "124", "649", "683", "159", "688", "695", "108", "3104", "107", "3107", "125", "3115", "126", "3116", "167", "3119", "3120", "3129", "125", "126", "3131", "3132", "3135", "3147", "3155", "165", "165", "165", "102", "102", "110", "165", "165", "105", "101", "113", "202", "166", "110", "166", "166", "166", "166", "166", "166", "133", "166", "100", "100", "126", "126", "127", "104", "110", "113", "125", "109", "104", "110", "113", "123", "101", "104", "110", "105", "101", "106", "110", "104", "104", "110", "115", "107", "101", "102", "101", "113", "111", "107", "104", "110", "113", "102", "166", "102", "166", "1921", "109", "111", "133", "203", "101", "110", "101", "104", "166", "167", "167", "102", "111", "167", "111", "167", "107", "167", "167", "128", "101", "167", "133", "123", "124", "167", "168", "168", "104", "110", "133", "113", "204", "102", "168", "205", "160 Saratoga Avenue", "https://www.unicode.org/Public/15.0.0/ucd/NameAliases.txt", "http://ocert.org/advisories/", "https://www.python.org/psf/", "https://opensource.org", "http://www.pythonlabs.com/logos.html", "http://hdl.handle.net/1895.22/1013", "http://www.math", "http://www.math.sci.hiroshima-u.ac.jp/", "https://www.wide.ad.jp/", "http://zooko.com/", "https://github.com/majek/csiphash/", "https://131002.net/siphash/siphash24.c", "https://web.archive.org/web/", "http://www.netlib.org/fp/dtoa.c", "https://www.apache.org/licenses/", "https://www.w3.org/TR/xml-c14n2-testcases/", "https://sourceforge.net/projects/sox/files/", "http://magic.io", "02/1/26", "class B(A): pass", "classpartoftheinstance;forexample: super()", "classprovidesimplementationsconsistentwith Value comparisons : equalitycompares", "class Bag[T]: ", "class Bag(Base[T], arg =T): ", "A", "A", "B", "B", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "B", "B", "B", "A", "A", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "B", "B", "B", "A", "A", "A", "B", "B", "B", "B", "A", "A", "A", "A", "B", "B", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A-", "A-", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "B", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "B", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "B", "A", "A", "A", "B", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "B", "B", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "B", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "B", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "B", "B", "A", "A", "B", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "14%", "B", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "B", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "B", "B", "B", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "B", "B", "A", "A", "B", "A", "B", "A", "B", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "B", "A", "A", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "A", "A", "B", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "B", "A", "B", "A", "B", "B", "B", "A", "B", "B", "B", "B", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "B", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "50%", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "A", "B", "A", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "B", "A", "B", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "B", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "A", "A", "A", "B", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B", "B", "B", "B", "A", "A", "B", "B", "A", "Variable Annotations\nTheproposalthataddedsyntaxforannotatingthetypesofvariables", "Variable Annotations\nAbilitytotypehintvariabledeclarations", "Incorporated Software", "National Research\nInitiatives", "National Research Initiatives", "Incorporated Software\nThissectionisanincomplete", "Incorporated Software", "Incorporated Software", "Incorporated Software", "Incorporated Software", "Incorporated Software", "Incorporated Software", "Incorporated Software", "hereisonePythonimplementationwhichisbyfarthemostpopular,therearesomealternateimplementa-", "hisbehaviourdependsontheimplementationused, so", "hereisnoreasontocomplicatethe", "hereasonbeingthattheefficientimplementationofdictionariesrequiresakey\u2019shashvaluetoremain", "heritance with multiple slotted parent classes can be used, but only one parent is allowed to have", "herits from another class, __init_subclass__() is called on the parent class", "hereclassdecoratorsonlyaffectthespecificclassthey\u2019reappliedto, __init_subclass__ solelyappliestofuture", "theirparentpackagenamebyadot,akintoPython\u2019s", "hereeachportioncontributesasubpackagetotheparent", "theirparentpackage(or sys", "hereisno parent/__init__", "heremaybemultiple parentdirectories", "hereasonforthisisthat:", "hisisbecausethemannerinwhich __main__ isinitializeddependson", "theirsideeffectsonthecontainingscope, yieldexpressionsarenotpermittedaspartoftheimplicitlydefined", "theircomparisonimplementation", "herit the default comparison behavior from", "theircomparisonbehaviorbyimplementing rich comparison methods like__lt__() ,", "theircomparisonbehavior,andinfact,anumberofbuilt-intypeshavedonethat", "her built-in types have no comparison methods implemented, so they inherit the default comparison", "theircomparisonbehaviorshouldfollowsomeconsistencyrules,ifpossible:", "her places where they can be used, parentheses are not re-", "herearetargetsinthetargetlist,minusone", "heraisedexceptionisnotanexceptiongroupanditstypematchesoneofthe except*clauses,itiscaughtand", "hereisnodifferenceifparenthesesorsquarebracketsareusedforsequencepatterns(i", "herlibertyistakeninthetranslation: thesyntaxdoesnotgothroughattributeaccessonthe typingmodule,but", "hisimplementationfromotherssuchasJythonorIronPython", "heresourcesitreliesonmaynotfunction", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining a copy", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining", "hereby granted, free of charge, to any person obtaining", "metapath ", "meticandbitwiseoperations ", "meticoperations ", "knowledgementsforIncorporatedSoftware ", "metimesworthbeingmentioned,especiallywheretheimplementationimposesadditional", "knowaboutthespecificimplementationyou\u2019reusing", "introducedbyanexclamation", "metic-operationsformoredetails", "meticoperatorsandarithmeticbuilt-infunctions", "metersthathavedefaults,or Noneifnoparameters", "metadatatofunctions", "method\u2019s documentation (same as method", "method objects may be created when getting an attribute of a class (perhaps via an instance of that", "method object is created by retrieving a user-defined function object from a class via one of its", "method object is created by retrieving a classmethod object from a class or instance, its", "methods;this onlyhappenswhenthefunctionisanattributeoftheclass", "methodwhichusesthe yieldstatement(seesection The yield statement )iscalleda generator function ", "method which is defined using async def and which uses the yieldstatement is called a asyn-", "methodobjectwhose __self__ attributeis C", "method,thatiscalledtosatisfythelookup", "method,thisiscalledinsteadofupdatingtheinstancedictionarydirectly", "method takes a single integer argument lengthand computes information about the slice that the slice", "methodobjectsprovideawayofdefeatingthetransformationoffunctionobjectstomethodobjectsdescribed", "methodobject, likeastaticmethodobject, isawrapperaroundanotherobjectthataltersthewayinwhich", "method objects are created by the built-in classmethod()", "metic operations or sub-", "methodto Noneindicatesthatthecorrespondingoperationisnotavailable", "metaclassesinordertocustomizeclasscreation", "method, if any, must explicitly call it to ensure proper initialization of the base", "methodsarecalledforobjectsthatstillexistwhentheinterpreterexits", "methodsareinvoked,exceptionsthatoccur", "method, to produce a \u201cformatted\u201d string representation of an object", "methodmayreturnthesingleton NotImplemented ifitdoesnotimplementtheoperation", "methodscanreturnanyvalue,soifthecomparisonoperatorisusedinaBooleancontext(e", "method may generate", "method returns any value other than NotImplemented , the ==and!=operators will", "method it should not define a __hash__() operation either; if it", "method of a class is None, instances of the class will raise an appropriate", "methodscanbedefinedtocustomizethemeaningofattributeaccess(useof,assignmentto,ordeletion", "metrybetween __getattr__() and__setattr__() ", "method should return the (computed) attribute value or raise an", "method, its implementation should", "methodwiththesamenametoaccessanyattributesitneeds,forexample, object", "methodmaystillbebypassedwhenlookingupspecialmethodsastheresultofimplicitinvocationvia", "methodshouldreturnthecomputedattributevalueorraisean AttributeError exception", "methods that are implemented in", "methods(includingthosedecoratedwith @staticmethod and@classmethod )areimplementedasnon-", "metaclass (rather than the explicit hint) can be ac-", "metheowningclass owneriscreated", "metaclassoperations", "meter, and must return a tuple of classes that will be used instead of the base", "metaclasses meets that criterion, then the class definition will fail", "metaclasshasno __prepare__ attribute,thentheclassnamespaceisinitialisedasanemptyorderedmapping", "methods,orthroughtheimplicitlexicallyscoped __class__ referencedescribedinthenextsection", "metaclass type,oranymetaclassthatultimatelycalls type", "method collects all of the attributes in the class namespace that define a", "methodsarecalledwiththeclassbeingdefinedandtheassignednameofthatparticular", "methodsthatarecalledoninstances,onlyinthiscase", "meterize ageneric type usingPython\u2019ssquare-bracketsnotation", "meterizedatruntimeandunderstood", "meterizationofstandard-librarygenericclassesin", "meterizedatruntimeandunderstoodbystatictype-checkers,", "knownasthatclass\u2019s metaclass,", "metaclassthatdefines __getitem__() ,subscribingtheclassmayresultindifferent", "methods is used either to emulate a sequence or to emulate a", "methoddidn\u2019texistatall", "methodispurelyanoptimizationandisneverrequiredforcorrectness", "method is called when an iteratoris required for a container", "method should return a new iterator", "method with a more efficient implementation, which", "methodscanbedefinedtoemulatenumericobjects", "methods are called to implement the binary arithmetic operations ( +,-,*,@,/,//,%,divmod() ,", "methods does not support the operation with the supplied arguments, it should return", "methods are called to implement the binary arithmetic operations ( +,-,*,@,/,//,%,divmod() ,", "metoocomplicated)", "methodfortheoperation,thismethodwillbecalledbeforetheleftoperand\u2019s", "methodsshouldattempttodotheoperationin-place(modifying self)and", "methodisnotdefined,orifthat", "method\u2014thatwillinsteadhavetheoppositeeffectofexplicitly blockingsuchfallback", "metype,itisassumedthatifthenon-reflectedmethod\u2013suchas __add__() \u2013failsthentheoveralloperationisnot", "meticoperations( -,+,abs()and~)", "methodindicatesthatthenumericobjectisanintegertype", "methodsshouldreturnthevalueoftheobjecttruncatedto", "metersdescribetheexceptionthatcausedthecontext", "methodmustreleaseanyresourcesassociatedwiththebuffer", "methodtobecompatiblewiththe awaitexpression", "methods listed below, which are analogous to those of generators (see Generator-iterator", "methoddelegatestothe send()methodoftheiterator", "methoddelegatestothe throw()methodoftheiterator", "methodfirstdelegatestothe", "methodoftheiteratorthatcausedthecoroutinetosuspend,ifithassuchamethod", "introducedbynamebindingoperations", "meters cannotbereboundwiththe nonlocal statement", "meter lists andtypestatementsintroduce annotation scopes ,whichbehavemostlylikefunctionscopes,but", "meters, as no other syntactic elements that can appear within annotation scopes can", "meta_path ", "knowshowtolocatebuilt-inmodules,and", "knows how to locate frozen modules", "meta hooks andimport path hooks ", "meta_path ,asdescribedbelow", "meta path", "meta_path , which contains", "meta path finder objects", "meta path finder can use any strategy it wants to determine", "metapathfinderknowshowtohandlethenamedmodule,itreturnsaspecobject", "meta_path processing reaches the end of its list without returning a spec, then", "methodofmetapathfindersiscalledwithtwoorthreearguments", "meta path may be traversed multiple times for a single import request", "meta path finder ( mpf)", "meta path a second time, calling mpf", "metapathfindersonlysupporttoplevelimports", "meta_path hasthreemetapathfinders,onethatknowshowtoimportbuilt-inmodules,one", "knowshowtoimportfrozenmodules,andonethatknowshowtoimportmodulesfroman import path (i", "methodofmetapathfindersreplaced find_module() ,whichisnow", "methodmustimplementalltheboilerplateloadingfunctionalitydescribedaboveinaddition", "metadatainthecache", "metadata", "metadata", "metapathfinders", "knowshowtohandlethatparticularkindofpath", "meta path finder andpath entry finder ", "meta path finders operate at the beginning of the import process, as keyed off the sys", "meta_path", "meta_path ,noneofthepathentryfindersemanticswouldbeinvoked", "metapathfinder,the path based finder implementsthe find_spec() protocolpreviouslydescribed,however", "meta path finder , so the import machinery begins the import path search by calling the", "meta path finder couldnotfindthemodule", "method that meta path finders support", "methods are never called with a pathargument (they are expected to record the appropriate", "method on path entry finders is deprecated, as it does not allow the path entry finder to", "meta_path ,replacingthementirelywithacustommetapathhook", "meta path (rather than disabling the", "metapathsearchshouldcontinue, whileraisinganexception", "metadataisdesiredin __main__ ", "meta_path wasPEP 302,withsubsequentextensionin PEP 420", "introducedabsoluteandexplicitrelativeimportsandinitiallyproposed __name__ forsemantics PEP 366", "metic operator below uses the phrase \u201cthe numeric arguments are converted to a", "known as a generator", "methodsofageneratoriterator", "methodsbelowwhenthegeneratorisalreadyexecutingraisesa ValueError", "method,thecurrentyieldexpressionalwaysevaluatesto None", "methodreturnsthenextvalueyieldedbythegenerator,orraises", "methodtofinalizethegeneratorandultimatelydetachitfromtheeventloop", "methodsofanasynchronousgeneratoriterator,whichareusedtocontroltheexecution", "methodforagenerator,this\u201csends\u201davalueintotheasynchronousgeneratorfunction,andthe value", "method or the __getattr__()", "method,thatmethodiscalledasafallback", "methodthatinterpretsnegativeindicesbyaddingthelengthofthesequencetotheindex", "methodwillneedtoexplicitlyaddthatsupport", "meter using the syntax *identifier is present; in this case, that formal parameter receives a tuple", "meterusingthesyntax **identifier ispresent;inthiscase,thatformalparameterreceivesadictionary", "metermatchingakeyhasalreadybeengivenavalue", "meterthatcouldbe", "method;theeffectisthenthesameasifthatmethodwascalled", "metypeastheoperandsunlessthesecondargumentisnegative;inthatcase,all", "metic and bitwise operations", "meticandbitwiseoperationshavethesamepriority:", "metic operations", "metic operations have the conventional priority levels", "knownasinterpolation)", "metic operations 89", "meticoperations:", "mething(matching)", "metimescalleda\u201cternaryoperator\u201d)havethelowestpriorityofallPythonoperations", "metimes called lambda forms) are used to create anonymous functions", "meticorbitwiseunaryoperatoronitsright,thatis, 2**-1is0", "methodiscalledwithappropriatearguments", "methatisnotenclosedinparentheses", "methat __debug__ andAssertionError refertothebuilt-invariableswiththosenames", "meta_path ,sys", "knowswhichfeaturenameshavebeendefined,andraisesacompile-timeerror", "methefuturestatementisexecuted", "meter values are evaluated from left to right when the function definition is executed", "meter syntax may be used to indicate positional-only parameters", "meters may have an annotation of the form \u201c : expression \u201d following the parameter name", "meters\u2019namesinthe __annotations__ attributeofthefunctionobject", "metersoftheform\u201c *identifier \u201dmayhaveanannotation\u201c : *expression \u201d", "methoddecoratorswereintroduced", "meters may be given in square brackets immediately after the class\u2019s name", "methoddecoratorswereintroducedin PEP 318", "methodthatdirectlyreturnsan asynchronous iterator ,whichcan", "metersaredeclaredinsquarebrackets( [])immediatelyafterthenameofthefunction,class,ortypealias", "meter list syntax, the bound and constraints are not evaluated", "meterdeclarations:", "meters,anddecoratorsareevaluatedoutsidethatscope", "meter declaration", "metic operators", "meters but without annotations", "methoduntilitraisesa StopAsyncIteration exception", "method() andstaticmethod() ", "method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be", "meta path finders forusewith sys", "meta_path ,andpath entry finders foruse", "methodorwitha __getitem__() methodthatimplements sequence", "methodjustraise StopIteration again", "methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces", "meta path finder", "meta_path ", "methodsthatmetapathfindersimplement", "metaclass is responsible for taking those three arguments and creating the class", "methods that may not be found", "methods,andstaticmethods", "method)definitionthatspecifiesan argument(orinsomecases,arguments)", "knows how to locate", "methodsthatpathentryfindersimplement", "meta path finders whichsearchesan import path formodules", "methoddefinedinthat", "method and defines a __len__() method that returns the length of the sequence", "methodsgenerally,seeCommonSequenceOperations", "methodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition", "knownas\u201cencoding\u201d,andrecreatingthestringfromthesequence", "knowledgements for Incorporated Software foranincompletelistoftheselicenses", "knowledgements for Incorporated Software", "knowledgementsforthird-partysoftwareincorporated", "knowledgements for Incorporated Software 175", "knowledgements for Incorporated Software 177", "knowledgements for Incorporated Software 179", "knowledgements for Incorporated Software 181", "knowledgements for Incorporated Software 183", "knowledgment in the product documentation would be", "knowledgements for Incorporated Software 185", "knowledgements for Incorporated Software 187", "method attribute ),22,23", "method attribute ),22,23", "method attribute ),22,23", "method attribute ),22,23", "method attribute ),22,23", "metic operation ,89", "meta path finder ,162", "meta_path ,67", "metic operation ,88", "livethatwouldnormally", "liveuntilthenextgarbagecollectionoccurs", "live the executed block and can be used after the match", "triple-quotedstrings(seebelow);inthatcasetheycannotcarrycomments", "triple-quotedliterals,unescapednewlinesandquotesareallowed(andareretained),exceptthatthreeunescaped", "triple-quoted strings ,orparenthesesand string literal concatenation ", "triple quoted strings), and formatted string literals may be", "triplequotes),orafterspecifyingadecorator", "triple-quoted string", "triple-quoted string ,167", "triple-quoted string ,10", "targetlistcontainsonetargetprefixedwithanasterisk,calleda\u201cstarred\u201dtarget: Theobjectmust", "target is an attribute reference: The primary expression in the reference is evaluated", "target is a subscription: The primary expression in the reference is evaluated", "targetisaslicing: Theprimaryexpressioninthereferenceisevaluated", "targets_list_seq : ',' ", "targets : ',' ", "collectionofobjectsitcontainscannotbechanged", "collected", "collection or omit it altogether \u2014 it is a matter of implementation", "collectionisimplemented,aslongasnoobjectsarecollectedthatarestillreachable", "collects most objects as soon as they become unreachable, but is not", "collectgarbagecontainingcircularreferences", "collectionofcyclicgarbage", "collectable", "collected, but since garbage collection is not guaranteed to happen,", "collection of objects directly", "collections andarraymoduleprovideadditionalexamplesofmutablesequencetypes", "collections module", "collected during module body execution", "collected", "collector ", "collections including set,", "collections", "collectionsrequiresthatakey\u2019shashvalueisimmutable(iftheobject\u2019s", "collections", "collections", "collects all of the attributes in the class namespace that define a", "collections", "collections", "collected),thegenerator-iterator\u2019s close()methodwillbe", "collection hook is called", "collected), then a yield expression within a tryconstruct could result in a failure to execute pending finally", "collectedbythe **parameter,ifthereis", "collectionsworksasfollows:", "collections to compare equal, they must be of the same type, have the same length, and each", "collectionisorderedfirst(forexample, [1,2] < [1,2,3] istrue)", "collections(e", "collections", "collection,freelists,andthedynamicnatureofdescriptors,youmaynoticeseeminglyunusualbehaviourincertain", "collectionofassigned-tovariables", "collectionoccurs", "collections", "collections", "collections", "collections", "collections", "collections", "collection", "collection", "collectionviareference", "collectorthatisabletodetectandbreakreferencecycles", "collector", "collector", "collections", "collections", "collections", "collections", "collections", "collections", "collectingcommunity", "collections", "collectivelyreferredtoas\u201ctextencodings\u201d", "collections", "collection ,17,158", "collections ,20", "remember that this can be a single expression or a comma-", "rememberingtheexecutionstate(includinglocalvariablesand", "rememberingtheexecutionstate(includinglocalvariablesand", "remember help(x))", "terms\u201dofwhatapatterndoesforillustrationpurposes", "terms P as NAME willmatchwith P,andonsuccessitwillset NAME = <subject> ", "terms and conditions for use, reproduction,", "lease 3", "lease 3", "lease 3", "will leave room for ambiguities", "lease 3", "leaserefertotheimplementation-", "lease 3", "lease 3", "willbeignoredfortheindentationcalculationsabove", "willneverbepoppedoffagain", "willalwaysbestrictlyincreasingfrombottomtotop", "lease 3", "lease 3", "will likely be defined in future versions of Python", "lease 3", "lease 3", "will not include \\", "will not include backslashes or newline characters", "willbeeventuallya SyntaxError ", "willbeeventuallya SyntaxError ", "lease 3", "lease 3", "will have the expression text, the '='and the evaluated value", "lease 3", "lease 3", "lease 3", "lease the external resource, usually a close()method", "lease 3", "will often be", "will then try the reflected operation, or some", "willemita DeprecationWarning ", "willraisea TypeError inafutureversionofPython", "lease 3", "lease 3", "lease 3", "will be produced in the same order they were added se-", "willaddittotheendinsteadofkeepingitsoldplace", "lease 3", "lease 3", "willactuallybetheclassitself,sothatcallingeither x", "will cause the function to execute until it provides a value", "willhavereachedtheendofthesetofvaluestobereturned", "willreturnan awaitablewhichwhenawaited", "will execute until it provides a value using the yieldexpression", "lease 3", "willhave", "willsetthevariousimport-controlledattributestoappropriatevalues", "lease 3", "willnotupdatethecorrespondingattributeonthemoduleitself:", "will", "lease 3", "will be removed in version 3", "will cease to be set or taken", "will be", "leaseseeannotations-howto", "will be cleared when the module falls out of scope even if the dictionary still has live references", "lease 3", "willbeexactlyequalto (A, B, C) ", "lease see", "lease 3", "lease 3", "lease 3", "lease 3", "willhavethefollowingproperties:", "willhavea startof0", "willbenon-decreasingandconsecutive", "willbeequaltothe endofthefirst", "willbebackwards: end >= start foralltriples", "willhave endequaltothesizeofthe bytecode", "lease 3", "lease 3", "lease 3", "lease 3", "will raise a TypeError", "will be invoked like __init__(self[, ", "will not be", "will cause a", "willstillraise", "lease 3", "willbelaterdetectedanddeletedbythe cyclic garbage collector ", "willeitherdelegateformatting", "lease 3", "willcall bool()onthevaluetodetermineiftheresultistrueor", "will", "lease 3", "willnotbeusableasitemsinhashablecollections", "willbeinthewronghashbucket)", "willhaveits __hash__() implicitlyset", "will raise an appropriate", "will also be correctly identified as", "lease 3", "will not be called unless __getattribute__() either calls it explic-", "lease 3", "lease 3", "willreturnthedescriptorobjectitselfunlessthereisavalueintheobject\u2019s", "lease 3", "willalwaysbeaccessible", "will get a __dict__ and__weakref__", "willberaisedifnonempty __slots__aredefinedforaclassderivedfroma \"variable-length\"", "willbeusedastheslotnames", "willberecognisedby inspect", "willbeanemptyiterator", "lease 3", "willnotbecalledautomatically", "lease 3", "will be used instead of the base", "will fail", "lease 3", "willbereferencedbythezero-argumentformof super()", "willresultina RuntimeError inPython3", "lease 3", "lease 3", "willcallthe __getitem__() instancemethoddefinedon", "lease 3", "lease 3", "will be raised for illegal indexes to allow proper detection of the", "lease 3", "willfallbacktousingthesequence", "lease 3", "willnottrycalling __rpow__() (thecoercionruleswouldbecometoocomplicated)", "willbecalledbeforetheleftoperand\u2019s", "willinsteadhavetheoppositeeffectofexplicitly blockingsuchfallback", "lease 3", "will bind this method\u2019s return value to", "willbe None", "willbeprocessednormallyuponexitfromthis", "lease 3", "willbeconvertedintoakeywordargument,usingthecorrespondingvalue", "willraisea TypeError ", "lease_buffer__ (self,buffer )", "leaseanyresourcesassociatedwiththebuffer", "lease_buffer__ methods", "lease 3", "lease 3", "willbemanagingthe awaitableobject", "lease 3", "will", "lease 3", "lease 3", "lease 3", "willfail:", "willsucceed:", "lease 3", "lease 3", "will", "lease 3", "will run under multiple versions of the", "lease 3", "lease 3", "willaddsomeadditionalattributestothemodule", "willimplicitlyexecute parent/__init__", "willexecute parent/two/__init__", "willautomaticallyperformanewsearchforpackageportionsonthenextimportattemptwithinthatpackage", "will create a namespace package for the top-level", "will be used in various phases of the import search, and it may be the dotted path to a submodule, e", "lease 3", "will contain entries for foo,foo", "will have as its value the", "willcontinuesearchingforthemodule", "willinvalidatethecacheentryforthenamedmodule,causingPythontosearchanewforthenamed", "will notbe the same", "willreusethe samemoduleobject,andsimplyreinitialisethemodulecontentsbyrerunningthemodule\u2019scode", "lease 3", "will", "will first perform a top level import, calling", "will be imported by traversing the meta path a second time, calling mpf", "willcall mpf", "willalwaysreturn Nonewhenanythingother", "willcontinuetoworkwithoutchange, theimportmachinerywilltryitonlyifthefinderdoes", "willuseit(andtheloaderitcontains)whenloadingthe", "will also be defined on the loader", "lease 3", "willhavealreadyreturned", "willexistin sys", "willbepropagated", "willcreatethenewmoduleitself", "lease 3", "willusethe load_module() methodofloadersifit", "willnotworkcorrectly", "willraise ImportWarning ", "willhaveanattribute foowhich", "lease 3", "willbefound", "willtrytogenerateareprfromit", "willcraftadefaultreprusingwhateverinformationisavailableonthemodule", "willtryto", "lease 3", "willbealistofstringpathstotraverse-typicallyapackage\u2019s __path__ attributeforanimportwithinthat", "lease 3", "will store Noneinsys", "willbetheactualcurrentworkingdirectoryandnottheemptystring", "willalwayshave\u201cloader\u201dset(with", "willbeusedif find_spec() isnotdefined", "willalwayscall find_loader() inpreferenceto find_module() ", "will raise", "lease 3", "lease 3", "lease 3", "willbeusedtodescribesyntax,notlexical", "lease 3", "lease 3", "lease 3", "willbethe", "willbeemittedatthepointwherethegeneratorexpression", "lease 3", "willbethevaluepassed", "willbe", "willraise AttributeError orTypeError ,while throw()willjustraisethe", "lease 3", "lease 3", "will be the value", "willrunandpossiblyraiseexceptionsoraccesscontextvariablesinanunexpected", "lease 3", "willstoretheregistered finalizertobecalleduponfinalization", "will con-", "will return the next value yielded by the generator as the value of the raised StopIteration , or raises", "will throw a GeneratorExit into the asynchronous generator func-", "will", "will raise a StopAsyncIteration exception", "willreturnanawaitablethatdoesnothing", "lease 3", "will generally select an element from the container", "willgenerallyreturnaGenericAliasobject", "willevaluatetheprimaryandtheexpressionlist", "willbepassedtooneofthesemethods", "will", "will evaluate to the", "willneedtoexplicitlyaddthatsupport", "lease 3", "lease refer to section Function definitions for the syntax of", "willbesharedbyallcallsthatdon\u2019tspecifyanargumentvalue", "lease 3", "willnotmatchanyformalparameterthatcouldbe", "willdo", "lease 3", "lease 3", "lease 3", "willcall bool()onsuchvalueinbooleancontexts", "lease 3", "willneedthathaveasensibledefinitionofobjectvalueandvalue-basedequality", "willneedtocustomizetheircomparisonbehavior,andinfact,anumberofbuilt-intypeshavedonethat", "lease 3", "willreturn True", "lease 3", "lease 3", "lease 3", "willbeevaluatedinthearithmeticorderoftheirsuffixes:", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "willbedisplayedaspartofthestacktrace", "will", "willcause StopIteration", "lease 3", "will cause StopAsyncIteration to be raised", "willbeobtainedwhenneededbyinstantiatingtheclass", "will be attached to the raised exception as the", "will be instantiated and", "will be attached to the raised exception as the __cause__ attribute", "willbeprinted:", "lease 3", "lease 3", "will be made available in the local namespace in one of three", "lease 3", "willraisea SyntaxError ", "willendupimporting pkg", "willimport pkg", "willbeavailableinaspecifiedfuturereleaseofPythonwherethefeaturebecomesstandard", "leaseinwhichthefeaturebecomes", "lease 3", "lease,thecompilerknowswhichfeaturenameshavebeendefined,andraisesacompile-timeerror", "willbeimportedintheusualwayatthetimethefuturestatementisexecuted", "will,bydefault,usethenewsyntaxorsemanticsassociatedwiththefuturestatement", "will take effect for the rest of the interpreter session", "willbeineffectintheinteractivesessionstartedafterthescriptisexecuted", "lease 3", "lease 3", "lease 3", "will not affect the for-loop", "will be overwritten with the next", "will not have", "lease 3", "willnothandletheexception", "lease 3", "lease 3", "willalwaysbethelastoneexecuted:", "lease 3", "will always be called", "willbetreatedthesameasanerroroccurringwithinthesuitewouldbe", "lease 3", "lease 3", "lease 3", "willalwayssucceed", "willincludeadescription\u201cinsimpleterms\u201dofwhatapatterndoesforillustrationpurposes", "lease 3", "willtrytomatch P1,ifitfailsitwilltrytomatch P2,succeedingimmediatelyif", "willmatchwith P,andonsuccessitwillset NAME = <subject> ", "will succeed only if <subject> == LITERAL ", "willalwayssucceedanditwillset NAME = <subject> ", "lease 3", "willalwayssucceed", "willsucceedonlyif <subject> == NAME1", "lease 3", "lease 3", "willraisea SyntaxError ", "willraisea ValueError atruntime", "lease 3", "will match", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "will be executed", "will be used (this avoids", "lease 3", "will throw a SyntaxError", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "willexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression", "willnotbeaccessibleusingadotted", "lease 3", "leases", "lease 3", "lease 3", "lease 3", "willbecomestandardinafuturereleaseofPython", "will(ordid)becomethedefault:", "lease 3", "leasetheGILwhen", "leasedwhen", "lease 3", "leasesallallocated", "willjustreturnthesameexhaustediteratorobjectused", "lease 3", "lease 3", "willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self)", "lease", "lease 3", "lease 3", "will not be made gratuitously \u2013 they will occur only if", "lease 3", "willstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems", "leaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe", "lease 3", "willnotbeenhancedfurther", "willnotemitwarnings", "leased", "lease 3", "lease 3", "lease take a look at the reporting-bugs page for information on how to do so", "lease 3", "leasedseveralversionsofthesoftware", "leasesareOpenSource(see https://opensource", "leaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases", "lease Derivedfrom Year Owner GPL-compatible? (1)", "leased under the", "leasespossible", "lease 3", "will automatically terminate upon a material breach of", "lease 3", "will automatically terminate upon a material breach of", "lease 3", "will automatically terminate upon a material breach of", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "will comply with the following terms and conditions:", "lease 3", "lease 3", "lease,andlaterreleasesderived", "lease 3", "lease 3", "lease 3", "will,", "lease 3", "will the authors be held liable for any damages", "lease 3", "leased under the BSD license:", "lease 3", "lease 3", "willSunMicrosystems,Inc", "lease 3", "lease 3", "lease 3", "lease_buffer__() (object method ),53", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3", "lease 3"]}